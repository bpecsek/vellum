** What is Vellum?
   Vellum is a data frame library build for Common Lisp. It is designed to be easy to both learn and use (especially in interactive fashion), practical, and reasonably efficient. Note that this software is in beta quality at the moment.

** Why I made Vellum?
Common Lisp is a fine language with exceptional interactivity, multiple implementations providing the potential for acceptable performance, useful features like condition system, and a stable standard base. This, in theory, makes is very much suited toward data processing and analysis. Although practice paints a less favorable picture, there are still use cases where Common Lisp could be considered to be a very good pick. Also, I simply like writing Lisp code.

Before Vellum existed I usually represented my data as vector-of-vectors (outer vector hold rows, inner vectors are rows). Then I would define accessors to obtain specific value from the data structure. This works but has a few distinct shortcomings. First off, it is not very flexible: I don't want to keep track of what a column with a specific number holds, I just want to refer to it by name. Secondly, I found that code written around such representations is difficult to read. After getting back to an old file I had to explain each individual line back to myself and this means that I am very likely to introduce mistakes If I have to change a thing. Higher-level semantics would help with that. Finally, I often work with a very sparse, and rather large, datasets. Enough so actually that I may simply run out of memory to represent all of my giganulls.

None of the above issues alone is substantial enough to be considered a real problem. However, in combination, and especially in an interactive programming context; when you want to get your code running as soon as possible, they really add up to a frustrating environment. I needed a nice, easy to use data frame library. Vellum is a such library for me, and I sincerely hope that it is a useful tool for you as well!

** Mindset
The main goal of the Vellum was to create a lispy data frame library, and therefore it should come with no surprise that the design is very different from a more famous Pandas for python. Although I attempted to emulate R lang workflow, Common Lisp, even with all of its awesomeness, lacks some of the R features (namely first-class expressions and environments) therefore the end result can be considered to be quite a bit unique. You are probably considering this is a drawback. However, I hope to demonstrate that Vellum is a approachable library.

** Header + Columns = Data Frame
Data Frame is composed of header and columns. The header can be thought of as a data schema, containing column names, column types, and predicates for stored values and is required to create a table. Let's construct an empty data frame.

#+BEGIN_SRC common-lisp
  (defparameter *table*
    (vellum:make-table
     :header (vellum:make-header 'vellum.header:standard-header
                                 '(:alias first-column)
                                 '(:alias second-column :type fixnum))))
#+END_SRC

You may be under impression that there has to be a better way to it. You would be correct.

#+BEGIN_SRC common-lisp
  (defparameter *table*
    (vellum:make-table :columns '((:alias first-column)
                                  (:alias second-column :type fixnum))))
#+END_SRC

** Read and write data
A freshly constructed data frame is obviously empty. However, the meaning of empty is somewhat blurred in vellum. Data frames are sparse in concept, meaning that they lack a natural bound. This means that although, you can locate the last non-empty row...

#+BEGIN_SRC common-lisp
(print (vellum:row-count *table*)) ; => 0
#+END_SRC

But an attempt to get non-existing data won't signal error.

#+BEGIN_SRC common-lisp
(print (vellum:at *table* 5 'first-column)) ; => :NULL
;; oh, btw, column names are actually strings, meaning that this...
(print (vellum:at *table* 5 "first-column")) ; => :NULL
;; will also work. Also, this means that you don't have to import symbols just to access data.
#+END_SRC

Furthermore, VELLUM:AT is actually a setfable place which means that you can even...

#+BEGIN_SRC common-lisp
(setf (vellum:at *table* 5 'first-column) "first value")
(print (vellum:at *table* 5 'first-column)) ; => first value
(print (vellum:row-count *table*)) ; => 6
(setf (vellum:at *table* 5 'first-column) :null) ; => error signalled, to remove value from the table use erase! function
(vellum:erase! *table* 5 'first-column)
(print (vellum:row-count *table*)) ; => 0
#+END_SRC

If one would want to, he could fill the content of the data frame in a loop. But that would be awkward, wouldn't it? I suspect that you would prefer some sort of a batch method that would be handier.

** TRANSFORM and BODY
This is where the TRANSFORM function and BODY macro combination comes in. The intent is to construct simple to use and universal facility to perform all kinds of row operations in a handy way. It is easy to demonstrate this on an example For instance, let's say that we want to calculate body mass index from weight and height. The formula is simple enough: weight (in kilograms) divided by height (in meters) squared. Given that our data frame already contains weight, height, and BMI columns, code becomes...

#+BEGIN_SRC common-lisp
  (vellum:transform *table*
                    (vellum:bind-row (bmi weight height)
                      (setf bmi (/ weight (* height height))))
                    :in-place t)
#+END_SRC

BODY is a macro that will expand to a lambda form with a (special) variables corresponding to the columns designated and extra boilerplate code for putting those values back into the data frame. Keyword argument :in-place allows for destructive changes. You may think that this is a bad idea sometimes given that a stray condition will leave your data messed up and I am happy to inform you that this is not the case. TRANSFORM is an exception-safe function that will alter the content of the table only after completion. IN-PLACE defaults to NIL anyway though.

TRANSFORM allows for a few extra tricks though. For instance, if we want to calculate BMI for individuals above a certain height, we can do this by using DROP-ROW. To demonstrate this idea:

#+BEGIN_SRC common-lisp
  (defparameter *above-170-only*
    (vellum:transform *table*
                      (vellum:bind-row (bmi weight height)
                        (if (<= height 1.7)
                            (vellum:drop-row)
                            (setf bmi (/ weight (* height height))))))))
#+END_SRC

Notice that this time I've left the original frame untouched. Other keyword arguments for the transform functions are :START (the first row that should be touched, defaults to 0) and :END (1+ the last row that should be touched, defaults to the ROW-COUNT). It is possible to pass NIL as :END which will mean that the programmer decided to terminate transform manually. This is quite handy when populating an empty data frame...

#+BEGIN_SRC common-lisp
  (defparameter *table*
    (alexandria:with-input-from-file (stream "bmi data.txt")
      (vellum:transform (vellum:make-table :columns '((:alias weight)
                                                      (:alias bmi)
                                                      (:alias height)))
                        (vellum:bind-row (weight height bmi)
                          (let ((line (read-line stream nil nil)))
                            (if (null line)
                                (vellum:finish-transformation)
                                (destructuring-bind ((new-weight new-height) (parse-data-line line))
                                    (setf weight new-weight
                                          height new-height
                                          bmi (/ weight (* height height)))))))
                        :end nil)))
#+END_SRC

This won't work if your data source insists on driving reading data. If API has just MAP-DATA function and no iterator you may think that you are screwed. Don't worry, there is also TRANSFORMATION that construct a sort of transform iterator that you can move on your own. More of that later.

One more thing: you can actually use name different from :alias in the column. This comes in handy when the alias is a reserved symbol or (perhaps even more often) when there is simply no alias, to begin with. In such case, the following will do the trick.

#+BEGIN_SRC common-lisp
  (defparameter *table*
    (alexandria:with-input-from-file (stream "bmi data.txt")
      (vellum:transform (vellum:make-table :columns '((:alias weight)
                                                      (:alias bmi)
                                                      (:alias height)))
                        (vellum:bind-row ((weight-but-different 0) height bmi)
                          (let ((line (read-line stream nil nil)))
                            (if (null line)
                                (vellum:finish-transformation)
                                (destructuring-bind ((new-weight new-height) (parse-data-line line))
                                    (setf weight-but-different new-weight
                                          height new-height
                                          bmi (/ weight-but-different (* height height)))))))
                        :end nil)))
#+END_SRC

** Columns manipulation
Usually, BMI would not be present in the data frame from the start and must be somehow added. Vellum does not make this needlessly complex. Simply use NEW-COLUMNS function.

#+BEGIN_SRC common-lisp
  (defparameter *table*
    (alexandria:with-input-from-file (stream "bmi data.txt")
      (vellum:new-columns (vellum:transform (vellum:make-table :columns '((:alias weight)
                                                                          (:alias height)))
                                            (vellum:bind-row (weight height)
                                              (let ((line (read-line stream nil nil)))
                                                (if (null line)
                                                    (vellum:finish-transformation)
                                                    (destructuring-bind (new-weight new-height) (parse-data-line line)
                                                        (setf weight new-weight
                                                              height new-height)))))
                                            :end nil)
                          '(:alias bmi))))
#+END_SRC

Let's admit it: this is getting a little bit nested. From now one I will use threading macro ~> from serapeum. By using this macro we are getting a somewhat more understandable form that does the exact same thing.

#+BEGIN_SRC common-lisp
  (defparameter *table*
    (alexandria:with-input-from-file (stream "bmi data.txt")
      (serapeum:~>
       (vellum:make-table :columns '((:alias weight) (:alias height)))
       (vellum:transform (vellum:bind-row (weight height)
                           (let ((line (read-line stream nil nil)))
                             (if (null line)
                                 (vellum:finish-transformation)
                                 (destructuring-bind (new-weight new-height) (parse-data-line line)
                                     (setf weight new-weight
                                           height new-height)))))
                         :end nil)
       (vellum:new-columns '(:alias bmi))))
#+END_SRC

Either way, it is impossible to change the number of columns in the table in a destructive way. This is by design as vellum headers are immutable as well.

Selecting a subset of the columns is equally important to add new columns. To do this in Vellum we should use VELLUM:SELECT function. Now, this function is slightly more complex, and it is all because of the input. For instance, to select just a single column…

#+BEGIN_SRC common-lisp
  (defparameter *table* (vellum:make-table :columns '((:alias first-colum)
                                                      (:alias second-column)
                                                      (:alias third-column))))
  (defparameter *just-second-and-third* (vellum:select *table*
                                          :columns '(:v 1 :v 2)))
  (defparameter *just-second-and-third* (vellum:select *table*
                                          :columns '(:v second-column :v third-column)))
  (defparameter *just-second-and-third* (vellum:select *table*
                                          :columns '(:take-from second-column :take-to third-column)))
  (defparameter *just-second-and-third* (vellum:select *table*
                                          :columns '(:take-from 1 :take-to 2)))
#+END_SRC

All four ways to select second and third columns are equally valid. :V keyword argument designates a single value, either by an integer or by column alias. Pair of :TAKE-FROM and :TAKE-TO allows us to select a range of columns, again either by designating column number or column alias. Selecting by range is probably not all that useful in the context of columns, however, the exact same syntax is used for :ROWS where it really it is in it's element. Anyway, the other worth knowing trick you can do is to combine selection forms. For instance, if you have 10 columns, and want just select columns 2, 3, 4, 7, 8, and 9 you can do the following.

#+BEGIN_SRC common-lisp
  (defparameter *table* (vellum:make-table :columns '((:alias first-colum)
                                                      (:alias second-column)
                                                      (:alias third-column)
                                                      (:alias fourth-column)
                                                      (:alias fifth-column)
                                                      (:alias sixth-column)
                                                      (:alias seventh-column)
                                                      (:alias eight-column)
                                                      (:alias nine-column))))
  (defparameter *columns-subset* (vellum:select *table*
                                   :columns '(:v 2 :v 3 :v 4 :v 7 :v 8 :v 9)))
  (defparameter *columns-subset* (vellum:select *table*
                                   :columns '(:take-from 2 :take-to 4 :take-from 7 :take-to 9)))
  (defparameter *columns-subset* (vellum:select *table*)
                                   :columns '(:take-from 2 :skip-from 5 :skip-to 6 :take-to 9)))
#+END_SRC

Depending on the specific use case each of those ways can be the most suitable and I don't intend to limit the user here.

** A few remarks about the inner representation and efficiency
Vellum stores data in a column format, where each column is a sparse variant of an RRB trie. I've chosen this type of representation for efficient copy-on-write. Copy-on-write is important as it allows for exception safety in the transform function as well as reduces memory usage by allowing safe sharing of the common data bits. However, at the same time, data frames expose a mutable interface. You could consider it to be unusual.

In fact, Vellum has a concept of ownership, meaning that each RRB trie node is owned by a data frame instance. If it happens that you are attempting to mutate a node owned by the current data frame, mutating is allowed. Otherwise, a new copy of the node is created but owned by the current data frame. This prevents spilling side effects outside of the data frame.

This also means that constructing a copy of the data frame can be optimized beyond a deep copy. REPLICA function will return a new instance of a data frame passed as the first argument. Changes performed on the returned data frame won't leak to the passed data frame. Additionally, if you pass T as the second argument (defaults to NIL) changes to the original data frame won't leak the new data frame. You probably won't be using REPLICA function all that often, but if you want to keep a history of your data changes in your lisp process this trick can be quite useful.

** Riding on the cl-data-structures
CL-data-structures is my other library. The name is a misnomer as the library grew into a hulking abomination of feature creep. I want to eventually divide it into smaller pieces but it is useful regardless. This is especially because of the ranges and algorithms implemented within. They work like Java Stream interface. Consider a common task of calculating the average of column. To do it with cl-data-structures you will just…

#+BEGIN_SRC common-lisp
  (vellum:with-table (*table*)
    (cl-ds.math:average *table* :key (vellum:bind-row (column-name) column-name)))
#+END_SRC

Form passed as a :KEY is a very common pattern. Enough so that there is a shortening macro.

#+BEGIN_SRC common-lisp
  (vellum:with-table (*table*)
    (cl-ds.math:average *table* :key (vellum:brr column-name)))
#+END_SRC

BRR stands for body row reference if you are wondering. The above code can be shortened further…

#+BEGIN_SRC common-lisp
  (vellum:pipeline (*table*)
    (cl-ds.math:average :key (vellum:brr column-name)))
#+END_SRC

PIPELINE is called so because it is typically used to build longer control flows. For instance, by incorporating GROUP-BY.

#+BEGIN_SRC common-lisp
  (vellum:pipeline (*table*)
    (cl-ds.alg:group-by :key (vellum:brr grouping-column-name))
    (cl-ds.math:average :key (vellum:brr column-name)))
#+END_SRC

Besides GROUP-BY there are also other functions altering how aggregation is performed. For instance CL-DS.ALG:ARRAY-ELEMENTWISE will apply aggregation function independently for each position in the array of the input and will return array as a result. Anyway, you probably would rather have GROUP-BY return a data frame instead of the cl-data-structures range. This will require just one more extra form.

#+BEGIN_SRC common-lisp
  (vellum:pipeline (*table*)
    (cl-ds.alg:group-by :key (vellum:brr grouping-column-name))
    (cl-ds.math:average :key (vellum:brr column-name))
    (vellum:to-table :columns '((:alias group) (:alias aggregation-result))))
#+END_SRC

And if you simply want to write code that mimics MS Excel, you can do that as well by using AGGREGATE-ROWS macro.

#+BEGIN_SRC common-lisp
  (vellum:aggregate-rows *table*
   :column1 ((cl-ds.math:average) :skip-nulls t)
   :column2 ((cl-ds.math:average) :skip-nulls t))
#+END_SRC

The above will construct a new data frame containing two columns (with aliases :column1 and :column2) and one row, holding the average of the column1 and column2 of the original table. The :SKIP-NULLS option prevents code from erroring out on the :NULL. It also improves performance somewhat.

** Integrating with other stuff
As hinted before, Vellum is designed to be easy to use with other libraries. For instance, let's say you want to use postmodern to access the postgres database where you are keeping your data safe and warm. To do so, you can do the following.

#+BEGIN_SRC common-lisp
  (defparameter *table* (vellum:make-table :columns '((:alias first-column) (:alias second-column))))
  (vellum:with-table (*table*)
    (postmodern:with-connection '("database" "username" "password" "localhost")
      (let ((transformation (vellum.table:transformation *table* (constantly nil) :in-place t :start 0))
            (bind-row-closure nil)
            (vellum.header:set-row (vellum.table:standard-transformation-row transformation))
            (postmodern:doquery (:select 'first_column 'second_column :from 'table)
                (first_column second_column)
              (when (null bind-row-closure)
                (setf bind-row-closure
                      (~> (vellum:bind-row (first-column second-column)
                            (setf first-colum first_column
                                  second-column second_column))
                          vellum.header:bind-row-closure))
              (vellum.table:transform-row bind-row-closure)))
            (vellum.table:transformation-result transformation))))
#+END_SRC

Postmodern is a really nice library, but doquery insists on driving its own iteration. As you can see that's not a big deal. For libraries that present us with an iterator-like interface, you can simply use TRANSFORM directly. Just don't forget to pass NIL as :END and call VELLUM:FINISH-TRANSFORMATION from the body form. I already showed you how.

** The future
I've actually already added integration with postmodern into the Vellum, as well as support for CSV files. Unfortunately, this part of the library leaves a lot to be desired and therefore I'll decide to skip it from the README. For now at least! If you want to help me improve vellum, I welcome your assistance!
